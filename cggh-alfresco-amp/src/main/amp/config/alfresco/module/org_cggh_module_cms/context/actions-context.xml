<?xml version='1.0' encoding='UTF-8'?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
          http://www.springframework.org/schema/beans/spring-beans-2.0.xsd">

	<bean id="cggh-associate-group" class="org.cggh.action.AssociateGroupActionExecuter" parent="action-executer">
		<property name="nodeService">
			<ref bean="nodeService" />
		</property>
		<property name="authorityService" ref="authorityService" />
	</bean>
	<bean id="ldapInitialDirContextFactory" class="org.alfresco.repo.security.authentication.ldap.LDAPInitialDirContextFactoryImpl">
		<property name="initialDirContextEnvironment">
			<map>
				<!-- The LDAP provider -->
				<entry key="java.naming.factory.initial">
					<value>${ldap.authentication.java.naming.factory.initial}</value>
				</entry>

				<!-- The url to the LDAP server -->
				<!-- Note you can use space separated urls - they will be tried in turn until one works -->
				<!-- This could be used to authenticate against one or more ldap servers (you will not know which one ....) -->
				<entry key="java.naming.provider.url">
					<value>${ldap.authentication.java.naming.provider.url}</value>
				</entry>

				<!-- The authentication mechanism to use for password validation -->
				<!-- Some sasl authentication mechanisms may require a realm to be set -->
				<!-- java.naming.security.sasl.realm -->
				<!-- The available options will depend on your LDAP provider -->
				<entry key="java.naming.security.authentication">
					<value>${ldap.authentication.java.naming.security.authentication}
					</value>
				</entry>

				<!-- Requests timeout, in miliseconds, use 0 for none (default) -->
				<entry key="com.sun.jndi.ldap.read.timeout">
					<value>${ldap.authentication.java.naming.read.timeout}</value>
				</entry>

				<!-- Automatically follow referrals -->
				<entry key="java.naming.referral">
					<value>follow</value>
				</entry>
			</map>
		</property>
		<property name="defaultIntialDirContextEnvironment">
			<map>
				<!-- The LDAP provider -->
				<entry key="java.naming.factory.initial">
					<value>${ldap.authentication.java.naming.factory.initial}</value>
				</entry>

				<!-- The url to the LDAP server -->
				<!-- Note you can use space separated urls - they will be tried in turn until one works -->
				<!-- This could be used to authenticate against one or more ldap servers (you will not know which one ....) -->
				<entry key="java.naming.provider.url">
					<value>${ldap.authentication.java.naming.provider.url}</value>
				</entry>

				<!-- The authentication mechanism to use for SYNCHRONIZATION -->
				<!-- Some sasl authentication mechanisms may require a realm to be set -->
				<!-- java.naming.security.sasl.realm -->
				<!-- The available options will depend on your LDAP provider -->
				<entry key="java.naming.security.authentication">
					<value>${ldap.synchronization.java.naming.security.authentication}</value>
				</entry>

				<!-- The id of a user who can read group and user information -->
				<!-- This does not go through the pattern substitution defined above and is used "as is" -->
				<entry key="java.naming.security.principal">
					<value>${ldap.synchronization.java.naming.security.principal}</value>
				</entry>

				<!-- The password for the user defined above -->
				<entry key="java.naming.security.credentials">
					<value>${ldap.synchronization.java.naming.security.credentials}</value>
				</entry>

				<!-- Allow the 'underlying mechanism' to obtain credentials (e.g. Kerberos) -->
				<entry key="javax.security.auth.useSubjectCredsOnly">
					<value>false</value>
				</entry>

				<!-- Pool the default connection -->
				<entry key="com.sun.jndi.ldap.connect.pool">
					<value>true</value>
				</entry>

				<!-- Requests timeout, in miliseconds, use 0 for none (default) -->
				<entry key="com.sun.jndi.ldap.read.timeout">
					<value>0</value>
				</entry>
				<!-- Automatically follow referrals -->
				<entry key="java.naming.referral">
					<value>follow</value>
				</entry>
			</map>
		</property>
	</bean>
	<bean id="cggh-create-ldap-group" class="org.cggh.action.CreateLDAPGroupActionExecuter" parent="action-executer">
		<property name="LDAPInitialDirContextFactory">
			<ref local="ldapInitialDirContextFactory" />
		</property>
	</bean>

	<bean id="cggh-manage-ldap-user" class="org.cggh.action.ManageLDAPUserActionExecuter" parent="action-executer">
		<property name="LDAPInitialDirContextFactory">
			<ref local="ldapInitialDirContextFactory" />
		</property>
		<property name="namespacePrefixResolver">
			<ref bean="namespaceService"></ref>
		</property>
		<property name="nodeService">
			<ref bean="nodeService"></ref>
		</property>
		<property name="authorityService">
			<ref bean="authorityService" />
		</property>
		<property name="personService">
			<ref bean="personService" />
		</property>
		<property name="searchBase">
			<value>${ldap.synchronization.userSearchBase}</value>
		</property>
		<property name="userId">
			<value>${ldap.synchronization.userIdAttributeName}</value>
		</property>
		<property name="member">
			<value>${ldap.synchronization.groupMemberAttributeName}</value>
		</property>
		<!-- <property name="personQuery">${ldap.synchronization.personQuery}</property> -->
	</bean>
</beans>
