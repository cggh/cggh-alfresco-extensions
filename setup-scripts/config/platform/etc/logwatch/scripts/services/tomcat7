#!/usr/bin/perl

use strict;
use Logwatch ':dates';
use Time::Local;
use POSIX qw(strftime);


my $date_format = '%Y-%m-%d';
my $filter = TimeFilter($date_format);
my $detail = exists $ENV{'LOGWATCH_DETAIL_LEVEL'} ? $ENV{'LOGWATCH_DETAIL_LEVEL'} : 0;

# we do not use any Date:: package (or strptime) as they are probably not available
my %month2num = ( Jan => 0, Feb => 1, Mar => 2, Apr => 3,
		  May => 4, Jun => 5, Jul => 6, Aug => 7,
		  Sep => 8, Oct => 9, Nov => 10, Dec => 11 );

# Detail level
my $Detail = $ENV{'LOGWATCH_DETAIL_LEVEL'} || 5;


# total number of errors in log file
my $Total_err = 0;
# hash with only unique errors, where KEY - error message, VALUE - number of errors of this type
my %unique_err = ();
# default value of error message
my $Message = "";
# total number of unique errors
my $Unique_err_num;

my $date1;
my $time1;
my $status;
my $status1;
my $line;

# main loop
while (defined($line = <STDIN>)) {
    # skipping messages that are not within the requested range
    next unless $line =~ /^($filter)/o;

	# use tomcat7 date regex to define start of new message (or end of previous)

	if ($line =~ /^(.*\s+[1-31]+.*(:+[0-9]+[0-9]+){2}\s+(AM|PM)+)/) {
		$Message = $Message.$line;
	# Ignorable strings (java stacktrace)
	} elsif($line =~ /^(.+(at+\s+)|(.*Hint:)|(.*Position:))|((\s+more)$)/) {
		next;
	} else {
		# if previous collected message - is Error message
		if ($status =~ /^(ERROR|SEVERE|WARN)/ || $status1 =~ /^(ERROR|SEVERE|WARN)/ ) {
			my $key = $Message;
			$key =~ s/^\s*([0-9-]*|[^\s]*)\s+[0-9:,\.]*\s+//;
			$key =~ s/DefaultScheduler_Worker-[0-9]*/DefaultScheduler_Worker/;
			$key =~ s/ajp-nio-8009-exec-[0-9]*/ajp-nio-8009-exec-/;
			# if it is a new message, then add this message to hash
			if (!exists $unique_err{$key}) {
				$unique_err{$key} = 0;
			}
			# increment messages counters
			$unique_err{ $key } = $unique_err{$key}+1;
			$Total_err++;
		}

		# clear variable from previous message 
		$Message = "";
		($date1,$time1,$status,$status1) = split(/\s+/,$line);
		# construct nessesary strings to message
		$Message = $Message.$line;
	}
}

# if log detail level is NOT LOW
if ($Detail != 0) {
	# Print every error in file
	while ( my ($key, $value) = each(%unique_err) ) {
		chomp $key;
		print "Message: $key\nCount: $value\n";
		print "-------------------------------\n";
	}
}

# get total number of unique errors in file
$Unique_err_num = scalar keys %unique_err;

# Print total result
print "Unique errors: $Unique_err_num\n";
print "Total num of Errors: $Total_err\n";
