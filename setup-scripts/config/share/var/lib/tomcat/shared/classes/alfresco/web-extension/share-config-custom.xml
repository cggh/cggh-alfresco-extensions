<alfresco-config>

    <config evaluator="string-compare" condition="CSRFPolicy" replace="true">

        <!--
         Properties that may be used inside the rest of the CSRFPolicy config to avoid repetition but
         also making it possible to provide different values in different environments.
         I.e. Different "Referer" & "Origin" properties for test & production etc.
         Reference a property using "{propertyName}".
      -->
      <properties>

          <!-- There is normally no need to override this property -->
          <token>Alfresco-CSRFToken</token>

          <!--
            Override and set this property with a regexp that if you have placed Share behind a proxy that
            does not rewrite the Referer header.
         -->
         <referer>http(s)?://(alfresco|share)(.*)\.(cggh|malariagen)\.(org|net)(/)?.*</referer>

         <!--
            Override and set this property with a regexp that if you have placed Share behind a proxy that
            does not rewrite the Origin header.
         -->
         <origin>http(s)?://(alfresco|share)(.*)\.(cggh|malariagen)\.(org|net)(/)?.*</origin>
     </properties>

     <!--
        Will be used and exposed to the client side code in Alfresco.contants.CSRF_POLICY.
        Use the Alfresco.util.CSRFPolicy.getHeader() or Alfresco.util.CSRFPolicy.getParameter() with Alfresco.util.CSRFPolicy.getToken()
        to set the token in custom 3rd party code.
      -->
      <client>
          <cookie>{token}</cookie>
          <header>{token}</header>
          <parameter>{token}</parameter>
      </client>

      <!-- The first rule with a matching request will get its action invoked, the remaining rules will be ignored. -->
      <filter>

          <!--
            Certain webscripts shall not be allowed to be accessed directly form the browser.
            Make sure to throw an error if they are used.
         -->
         <rule>
             <request>
                 <path>/proxy/alfresco/remoteadm/.*</path>
             </request>
             <action name="throwError">
                 <param name="message">It is not allowed to access this url from your browser</param>
             </action>
         </rule>

         <!--
            Certain Repo webscripts should be allowed to pass without a token since they have no Share knowledge.
            TODO: Refactor the publishing code so that form that is posted to this URL is a Share webscript with the right tokens.
         -->
         <rule>
             <request>
                 <method>POST</method>
                 <path>/proxy/alfresco/api/publishing/channels/.+</path>
             </request>
             <action name="assertReferer">
                 <param name="referer">{referer}</param>
             </action>
             <action name="assertOrigin">
                 <param name="origin">{origin}</param>
             </action>
         </rule>

         <!--
            Certain Surf POST requests from the WebScript console must be allowed to pass without a token since
            the Surf WebScript console code can't be dependent on a Share specific filter.
         -->
         <rule>
             <request>
                 <method>POST</method>
                 <path>/page/caches/dependency/clear|/page/index|/page/surfBugStatus|/page/modules/deploy|/page/modules/module|/page/api/javascript/debugger|/page/console</path>
             </request>
             <action name="assertReferer">
                 <param name="referer">{referer}</param>
             </action>
             <action name="assertOrigin">
                 <param name="origin">{origin}</param>
             </action>
         </rule>

         <!-- Certain Share POST requests does NOT require a token -->
         <rule>
             <request>
                 <method>POST</method>
                 <path>/page/dologin(\?.+)?|/page/site/[^/]+/start-workflow|/page/start-workflow|/page/context/[^/]+/start-workflow</path>
             </request>
             <action name="assertReferer">
                 <param name="referer">{referer}</param>
             </action>
             <action name="assertOrigin">
                 <param name="origin">{origin}</param>
             </action>
         </rule>

         <!-- Assert logout is done from a valid domain, if so clear the token when logging out -->
         <rule>
             <request>
                 <method>POST</method>
                 <path>/page/dologout(\?.+)?</path>
             </request>
             <action name="assertReferer">
                 <param name="referer">{referer}</param>
             </action>
             <action name="assertOrigin">
                 <param name="origin">{origin}</param>
             </action>
             <action name="clearToken">
                 <param name="session">{token}</param>
                 <param name="cookie">{token}</param>
             </action>
         </rule>

         <!-- Make sure the first token is generated -->
         <rule>
             <request>
                 <session>
                     <attribute name="_alf_USER_ID">.+</attribute>
                     <attribute name="{token}"/>
                     <!-- empty attribute element indicates null, meaning the token has not yet been set -->
                 </session>
             </request>
             <action name="generateToken">
                 <param name="session">{token}</param>
                 <param name="cookie">{token}</param>
             </action>
         </rule>

         <!-- Refresh token on new "page" visit when a user is logged in -->
         <rule>
             <request>
                 <method>GET</method>
                 <path>/page/.*</path>
                 <session>
                     <attribute name="_alf_USER_ID">.+</attribute>
                     <attribute name="{token}">.+</attribute>
                 </session>
             </request>
             <action name="generateToken">
                 <param name="session">{token}</param>
                 <param name="cookie">{token}</param>
             </action>
         </rule>

         <!--
            Verify multipart requests from logged in users contain the token as a parameter
            and also correct referer & origin header if available
         -->
         <rule>
             <request>
                 <method>POST</method>
                 <header name="Content-Type">multipart/.+</header>
                 <session>
                     <attribute name="_alf_USER_ID">.+</attribute>
                 </session>
             </request>
             <action name="assertToken">
                 <param name="session">{token}</param>
                 <param name="parameter">{token}</param>
             </action>
             <action name="assertReferer">
                 <param name="referer">{referer}</param>
             </action>
             <action name="assertOrigin">
                 <param name="origin">{origin}</param>
             </action>
         </rule>

         <!--
            Verify that all remaining state changing requests from logged in users' requests contains a token in the
            header and correct referer & origin headers if available. We "catch" all content types since just setting it to
            "application/json.*" since a webscript that doesn't require a json request body otherwise would be
            successfully executed using i.e."text/plain".
         -->
         <rule>
             <request>
                 <method>POST|PUT|DELETE</method>
                 <session>
                     <attribute name="_alf_USER_ID">.+</attribute>
                 </session>
             </request>
             <action name="assertToken">
                 <param name="session">{token}</param>
                 <param name="header">{token}</param>
             </action>
             <action name="assertReferer">
                 <param name="referer">{referer}</param>
             </action>
             <action name="assertOrigin">
                 <param name="origin">{origin}</param>
             </action>
         </rule>
     </filter>

 </config>
 <config evaluator="string-compare" condition="Remote" replace="true">
     <remote>
         <connector>
             <id>alfrescoCookie</id>
             <name>Alfresco Connector</name>
             <description>Connects to an Alfresco instance using cookie-based authentication</description>
             <class>org.alfresco.web.site.servlet.SlingshotAlfrescoConnector</class>
         </connector>

         <connector>
             <id>alfrescoHeader</id>
             <name>Alfresco Connector</name>
             <description>Connects to an Alfresco instance using header and cookie-based authentication</description>
             <class>org.alfresco.web.site.servlet.SlingshotAlfrescoConnector</class>
             <userHeader>X-Alfresco-Remote-User</userHeader>
         </connector>

         <endpoint>
             <id>alfresco-noauth</id>
             <name>Alfresco - unauthenticated access</name>
             <description>Access to Alfresco Repository WebScripts that do not require authentication</description>
             <connector-id>alfrescoHeader</connector-id>
             <endpoint-url>http://localhost:8080/alfresco/service</endpoint-url>
             <identity>none</identity>
         </endpoint>

         <endpoint>
             <id>alfresco</id>
             <name>Alfresco - user access</name>
             <description>Access to Alfresco Repository WebScripts that require user authentication</description>
             <connector-id>alfrescoHeader</connector-id>
             <endpoint-url>http://localhost:8080/alfresco/wcs</endpoint-url>
             <identity>user</identity>
             <external-auth>true</external-auth>
         </endpoint>

         <endpoint>
             <id>alfresco-feed</id>
             <parent-id>alfresco</parent-id>
             <name>Alfresco Feed</name>
             <description>Alfresco Feed - supports basic HTTP authentication via the EndPointProxyServlet</description>
             <connector-id>alfrescoHeader</connector-id>
             <endpoint-url>http://localhost:8080/alfresco/wcs</endpoint-url>
             <identity>user</identity>
             <external-auth>true</external-auth>
         </endpoint>

         <endpoint>
             <id>alfresco-api</id>
             <parent-id>alfresco</parent-id>
             <name>Alfresco Public API - user access</name>
             <description>Access to Alfresco Repository Public API that require user authentication.
                 This makes use of the authentication that is provided by parent 'alfresco' endpoint.</description>
             <connector-id>alfrescoHeader</connector-id>
             <endpoint-url>http://localhost:8080/alfresco/api</endpoint-url>
             <identity>user</identity>
             <external-auth>true</external-auth>
         </endpoint>

         <endpoint>
            <id>activiti-admin</id>
            <name>Activiti Admin UI - user access</name>
            <description>Access to Activiti Admin UI, that requires user authentication</description>
            <connector-id>activiti-admin-connector</connector-id>
            <endpoint-url>http://localhost:8080/alfresco/activiti-admin</endpoint-url>
            <identity>user</identity>
        </endpoint>

     </remote>
 </config>


 <!-- Cookie settings -->
 <!-- To disable alfUsername2 cookie set enableCookie value to "false" -->
 <!--
   <plug-ins>
      <element-readers>
         <element-reader element-name="cookie" class="org.alfresco.web.config.cookie.CookieElementReader"/>
      </element-readers>
   </plug-ins>

   <config evaluator="string-compare" condition="Cookie" replace="true">
      <cookie>
         <enableCookie>false</enableCookie>
         <cookies-to-remove>
            <cookie-to-remove>alfUsername3</cookie-to-remove>
            <cookie-to-remove>alfLogin</cookie-to-remove>
         </cookies-to-remove>
      </cookie>
   </config>
   -->
</alfresco-config>
